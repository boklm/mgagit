#!/usr/bin/perl -w

use strict;
use MGA::Git;
use YAML;
#use Data::Dump qw/dd/;

my %actions = (
    glconf => {
        run  => \&glconf,
        descr => 'Print gitolite configuration',
        usage => <<END,
$0 glconf [repo]

Print the gitolite configuration. Optionaly you can add a repository
name as parameter to display the configuration for this repository only.
END
    },
    glrun  => {
        run  => \&glrun,
        descr => 'Update gitolite configuration',
        usage => <<END,
$0 glrun

Update gitolite configuration, and run gitolite if changed.
END
    },
    usage  => {
        run   => \&usage,
        descr => 'Show usage informations for an action',
        usage => <<END,
$0 usage [action]

Show action usage
END
    },
    showconf  => {
        run   => \&showconf,
        descr => 'Show YAML mgagit configuration',
        usage => <<END,
$0 showconf [reponame] [optionname]

Show the mgagit configuration. If given one argument, it will display
the configuration for the specified repo. If given two argument, it
will display the value of the specified option for the specified repo.
Without any argument, it displays all the configuration.
END
    },
);

sub usage {
    if ($_[1] && $actions{$_[1]}) {
        print STDERR $actions{$_[1]}->{usage};
    } else {
        print STDERR "$0 [action] [options]\n";
        print STDERR "$0 usage [action]\n\n";
        print STDERR "Available actions:\n";
        print STDERR map { " - $_ : $actions{$_}->{descr}\n" } keys %actions;
    }
}
sub usageexit {
    usage(@_);
    exit 1;
}

sub glconf {
    usageexit('usage', $_[0]) unless @_ <= 2;
    my %r;
    MGA::Git::load_gitrepos(\%r);
    MGA::Git::load_groups(\%r) if @_ == 1;
    MGA::Git::load_users(\%r);
    if (my $repo = $_[1]) {
        if (!$r{repos}{$repo}) {
            print STDERR "Cannot find repository $repo\n";
            exit 1;
        }
        print MGA::Git::gitolite_repo_config(\%r, $repo);
    } else {
        print MGA::Git::gitolite_config(\%r), "\n";
    }
}

sub glrun {
    usageexit('usage', $_[0]) unless @_ == 1;
    my %r;
    MGA::Git::load_gitrepos(\%r);
    MGA::Git::load_groups(\%r);
    MGA::Git::load_users(\%r);
    MGA::Git::dumpdb(\%r);
    MGA::Git::update_gitolite_keydir(\%r);
    MGA::Git::update_gitolite_config(\%r);
    MGA::Git::run_gitolite(\%r);
}

sub showconf {
    shift;
    my $res;
    my %r;
    MGA::Git::load_gitrepos(\%r);
    usageexit('usage', 'showconf') if @_ > 2;
    if (@_ == 1) {
        $res = YAML::Dump($r{repos}{$_[0]});
    } elsif (@_ == 2) {
        $res = MGA::Git::repo_config(\%r, @_);
        $res .= "\n" if defined $res;
    } else {
        my $c = $MGA::Git::config;
        $c->{r} = \%r;
        $res = YAML::Dump($c);
    }
    print defined $res ? $res : "undef\n";
    exit !defined $res;
}

if (@ARGV == 0 || !$actions{$ARGV[0]}) {
    usageexit();
}
$actions{$ARGV[0]}->{run}->(@ARGV);

